(defpackage main
  (:use :common-lisp :dimension
        :algebra :poly-io :external-helpers :find-statistical-fan :experimental-design
        #+cmu :ext
        #+sbcl :sb-ext))

(in-package main)
(defvar *count*)
(defvar *gfan*)
(defvar *gfan-leading-terms*)

(defun leading-terms (polys)
  (sort (mapcar #'cdar polys) #'lex-less))

(defun on-sequence (seq polys)
  (when (zerop *count*)
    (format t "Groebner basis:~%")
    (dolist (poly polys)
      (format t "  ")
      (poly-print poly)
      (format t "~%"))
    (format t "~%Groebner fan consists of...")
    (setf *gfan* (get-gfan polys))
    (setf *gfan-leading-terms* nil)
    (format t " ~a bases~%" (length *gfan*))
    (dolist (polys *gfan*)
      (push (leading-terms polys) *gfan-leading-terms*)
      ;(polys-print polys)
      ;(format t "~%")
      )
    (format t "~%")
    (setf *first* nil))
  (format t "(")
  (dolist (monom seq)
    (unless (equalp monom (car seq))
      (format t ", "))
    (term-print (cons 1 monom)))
  (format t ")~%")
  (unless (find (leading-terms polys) *gfan-leading-terms* :test #'equalp)
    (format t "  (not in algebraic fan)~%"))
  (incf *count*))


(defun main ()
  (let ((poly-io:*vars* '("x" "y" "z" "w" "p" "q"))
        (*count* 0)
        (*on-sequence* #'on-sequence)
        )
    (setf *vars* (subseq *vars* 0 3))
    ;(find-fan '((0 0) (0 -1) (1 0) (1 1) (-1 1)))
    ;(find-fan '((0 0) (0 -1) (1 0) (1 1) (-1 1) (2 2) (5 2)))
    ;(find-fan (cube 2))
    (find-fan (box-behnken 3))
    ;(find-fan (box-wilson-ccc 2))
    (format t "Found ~a models~%" *count*)
    ))
